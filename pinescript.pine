//@version=5
strategy("Enhanced KAMA-RSI BTC Strategy", shorttitle="KAMA-RSI", overlay=true, 
         default_qty_type=strategy.percent_of_equity, default_qty_value=2,
         commission_type=strategy.commission.percent, commission_value=0.01,
         max_bars_back=500, process_orders_on_close=true)

// ============================================================================
// STRATEGY PARAMETERS
// ============================================================================

// KAMA Settings
kama_length = input.int(8, "KAMA Length", minval=1, group="KAMA Settings")
kama_fast = input.int(2, "KAMA Fast EMA", minval=1, group="KAMA Settings")
kama_slow = input.int(25, "KAMA Slow EMA", minval=1, group="KAMA Settings")

// RSI Settings
rsi_length = input.int(14, "RSI Length", minval=1, group="RSI Settings")
rsi_trend_high = input.int(60, "RSI Trend High Level", minval=50, maxval=80, group="RSI Settings")
rsi_trend_low = input.int(40, "RSI Trend Low Level", minval=20, maxval=50, group="RSI Settings")
rsi_range_high = input.int(70, "RSI Range High Level", minval=60, maxval=90, group="RSI Settings")
rsi_range_low = input.int(30, "RSI Range Low Level", minval=10, maxval=40, group="RSI Settings")

// Volume Settings
volume_multiplier = input.float(1.5, "Volume Multiplier", minval=1.0, step=0.1, group="Volume Settings")
volume_ma_length = input.int(20, "Volume MA Length", minval=1, group="Volume Settings")

// Multi-timeframe Settings
htf_timeframe = input.timeframe("240", "Higher Timeframe", group="Multi-timeframe")
htf_ema_length = input.int(21, "HTF EMA Length", minval=1, group="Multi-timeframe")

// Risk Management
atr_length = input.int(14, "ATR Length", minval=1, group="Risk Management")
atr_multiplier = input.float(1.5, "ATR Stop Multiplier", minval=0.5, step=0.1, group="Risk Management")
risk_per_trade = input.float(2.0, "Risk Per Trade (%)", minval=0.1, step=0.1, group="Risk Management")
take_profit_ratio = input.float(1.5, "Take Profit Ratio", minval=1.0, step=0.1, group="Risk Management")

// Trading Session
session_start = input.int(21, "Session Start Hour (UTC)", minval=0, maxval=23, group="Trading Session")
session_end = input.int(23, "Session End Hour (UTC)", minval=0, maxval=23, group="Trading Session")
use_session_filter = input.bool(true, "Use Session Filter", group="Trading Session")

// Trend Detection
adx_length = input.int(14, "ADX Length", minval=1, group="Trend Detection")
adx_threshold = input.int(20, "ADX Trend Threshold", minval=10, group="Trend Detection")

// ============================================================================
// INDICATOR CALCULATIONS
// ============================================================================

// KAMA Calculation
kama() =>
    mom = math.abs(close - close[kama_length])
    volatility = math.sum(math.abs(close - close[1]), kama_length)
    er = mom / volatility
    fastSC = 2 / (kama_fast + 1)
    slowSC = 2 / (kama_slow + 1)
    sc = math.pow(er * (fastSC - slowSC) + slowSC, 2)
    var float kama_val = na
    kama_val := na(kama_val[1]) ? close : kama_val[1] + sc * (close - kama_val[1])
    kama_val

kama_line = kama()
kama_slope = kama_line - kama_line[1]
kama_rising = kama_slope > 0
kama_falling = kama_slope < 0

// RSI Calculation
rsi = ta.rsi(close, rsi_length)

// Volume Confirmation
volume_ma = ta.sma(volume, volume_ma_length)
volume_confirmed = volume > volume_ma * volume_multiplier

// Higher Timeframe Trend
htf_ema = request.security(syminfo.tickerid, htf_timeframe, ta.ema(close, htf_ema_length), lookahead=barmerge.lookahead_off)
htf_trend_up = close > htf_ema
htf_trend_down = close < htf_ema

// ADX for Trend/Range Detection
[di_plus, di_minus, adx] = ta.dmi(adx_length, adx_length)
is_trending = adx > adx_threshold
is_ranging = not is_trending

// Dynamic RSI Levels
rsi_high_level = is_trending ? rsi_trend_high : rsi_range_high
rsi_low_level = is_trending ? rsi_trend_low : rsi_range_low

// ATR for Stop Loss
atr_value = ta.atr(atr_length)

// Session Filter
current_hour = hour(time, "UTC")
in_session = use_session_filter ? (current_hour >= session_start and current_hour <= session_end) : true

// ============================================================================
// SIGNAL GENERATION
// ============================================================================

// KAMA Crossover Signals
kama_cross_up = ta.crossover(close, kama_line) and kama_rising
kama_cross_down = ta.crossunder(close, kama_line) and kama_falling

// Long Entry Conditions
long_kama = kama_cross_up and kama_rising
long_rsi = rsi > rsi_low_level
long_htf = htf_trend_up
long_volume = volume_confirmed
long_session = in_session

long_signal = long_kama and long_rsi and long_htf and long_volume and long_session

// Short Entry Conditions  
short_kama = kama_cross_down and kama_falling
short_rsi = rsi < rsi_high_level
short_htf = htf_trend_down
short_volume = volume_confirmed
short_session = in_session

short_signal = short_kama and short_rsi and short_htf and short_volume and short_session

// ============================================================================
// POSITION MANAGEMENT
// ============================================================================

// Calculate Position Size
calculate_position_size(entry_price, stop_price, risk_percent) =>
    risk_amount = strategy.equity * (risk_percent / 100)
    stop_distance = math.abs(entry_price - stop_price)
    position_size = risk_amount / stop_distance
    position_size

// Entry Logic
if long_signal and strategy.position_size == 0
    stop_loss = close - (atr_value * atr_multiplier)
    take_profit = close + (math.abs(close - stop_loss) * take_profit_ratio)
    pos_size = calculate_position_size(close, stop_loss, risk_per_trade)
    strategy.entry("Long", strategy.long, qty=pos_size)
    strategy.exit("Long Exit", "Long", stop=stop_loss, limit=take_profit)

if short_signal and strategy.position_size == 0
    stop_loss = close + (atr_value * atr_multiplier)
    take_profit = close - (math.abs(close - stop_loss) * take_profit_ratio)
    pos_size = calculate_position_size(close, stop_loss, risk_per_trade)
    strategy.entry("Short", strategy.short, qty=pos_size)
    strategy.exit("Short Exit", "Short", stop=stop_loss, limit=take_profit)

// Trailing Stop using KAMA
if strategy.position_size > 0  // Long position
    if close < kama_line and kama_falling
        strategy.close("Long", comment="KAMA Trailing Stop")

if strategy.position_size < 0  // Short position
    if close > kama_line and kama_rising
        strategy.close("Short", comment="KAMA Trailing Stop")

// Emergency Exit on Adverse Conditions
if strategy.position_size > 0 and short_kama and short_rsi
    strategy.close("Long", comment="Adverse Signal")

if strategy.position_size < 0 and long_kama and long_rsi
    strategy.close("Short", comment="Adverse Signal")

// ============================================================================
// PLOTTING AND VISUALIZATION
// ============================================================================

// Plot KAMA
plot(kama_line, "KAMA", color=kama_rising ? color.green : color.red, linewidth=2)

// Plot HTF EMA
plot(htf_ema, "HTF EMA", color=color.blue, linewidth=1, style=plot.style_line)

// Background for trading session
bgcolor(in_session ? color.new(color.yellow, 95) : na, title="Trading Session")

// Background for trend/range
bgcolor(is_trending ? color.new(color.green, 98) : color.new(color.red, 98), title="Market Regime")

// Entry Signals
plotshape(long_signal, "Long Signal", shape.triangleup, location.belowbar, color.green, size=size.small)
plotshape(short_signal, "Short Signal", shape.triangledown, location.abovebar, color.red, size=size.small)

// ============================================================================
// INFORMATION TABLE
// ============================================================================

// Create information table
if barstate.islast
    var info_table = table.new(position.top_right, 2, 8, bgcolor=color.white, border_width=1)
    
    table.cell(info_table, 0, 0, "KAMA-RSI Strategy", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 1, 0, "Status", text_color=color.black, bgcolor=color.gray)
    
    table.cell(info_table, 0, 1, "KAMA Trend", text_color=color.black)
    table.cell(info_table, 1, 1, kama_rising ? "Rising" : "Falling", 
               text_color=kama_rising ? color.green : color.red)
    
    table.cell(info_table, 0, 2, "RSI", text_color=color.black)
    table.cell(info_table, 1, 2, str.tostring(math.round(rsi, 2)), text_color=color.black)
    
    table.cell(info_table, 0, 3, "HTF Trend", text_color=color.black)
    table.cell(info_table, 1, 3, htf_trend_up ? "Bullish" : "Bearish", 
               text_color=htf_trend_up ? color.green : color.red)
    
    table.cell(info_table, 0, 4, "Volume", text_color=color.black)
    table.cell(info_table, 1, 4, volume_confirmed ? "Confirmed" : "Low", 
               text_color=volume_confirmed ? color.green : color.red)
    
    table.cell(info_table, 0, 5, "Market Regime", text_color=color.black)
    table.cell(info_table, 1, 5, is_trending ? "Trending" : "Ranging", 
               text_color=is_trending ? color.green : color.orange)
    
    table.cell(info_table, 0, 6, "Session", text_color=color.black)
    table.cell(info_table, 1, 6, in_session ? "Active" : "Inactive", 
               text_color=in_session ? color.green : color.gray)
    
    table.cell(info_table, 0, 7, "Position", text_color=color.black)
    position_text = strategy.position_size > 0 ? "Long" : strategy.position_size < 0 ? "Short" : "None"
    position_color = strategy.position_size > 0 ? color.green : strategy.position_size < 0 ? color.red : color.gray
    table.cell(info_table, 1, 7, position_text, text_color=position_color)

// ============================================================================
// ALERTS
// ============================================================================

// Alert conditions
alertcondition(long_signal, title="Long Entry Signal", message="KAMA-RSI: Long entry signal generated")
alertcondition(short_signal, title="Short Entry Signal", message="KAMA-RSI: Short entry signal generated")
alertcondition(ta.crossunder(close, kama_line) and strategy.position_size > 0, 
               title="Long Exit Signal", message="KAMA-RSI: Long position should be closed")
alertcondition(ta.crossover(close, kama_line) and strategy.position_size < 0, 
               title="Short Exit Signal", message="KAMA-RSI: Short position should be closed")

// ============================================================================
// STRATEGY STATISTICS (Displayed in Strategy Tester)
// ============================================================================

// Performance metrics are automatically calculated by TradingView
// Access them through: Strategy Tester -> Performance Summary
// Key metrics to monitor:
// - Net Profit, Gross Profit, Gross Loss
// - Total Closed Trades, Win Rate, Profit Factor
// - Max Drawdown, Sharpe Ratio, Calmar Ratio 